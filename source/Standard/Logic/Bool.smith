∙ B
	Global@Boolean.to-class 'Bool

B.do
	‣val True
		`true`

	‣val False
		`false`

	‣ ? then:Fun else:Fun
		`this.valueOf() ? then() : _else()`

	‣ ∨ a:Fun
		eg
			✔= False
				False.∨
					False
			✔= True
				True.∨
					False

		`this || a()`

	‣ ∧ a:Fun
		`this && a()`

	‣ ¬
		`!this`

	‣ → a:Fun
		`!this || a()`

	‣ ⊕ a:Bool
		`this ? !a : a`

	‣ nor a:Bool
		`!(this || a)`

	‣ if then:Fun
		`this ? Opt().some(then()) : Opt().None()`

	‣ unless then:Fun
		¬.if then

	#alias '? 'if-then-else
	#alias '∨ 'or
	#alias '∧ 'and
	#alias '¬ 'not
	#alias '→ 'implies
	#alias '⊕ 'xor


export B
