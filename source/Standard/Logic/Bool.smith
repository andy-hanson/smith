∙ B
	Global@Boolean.to-class 'Bool

B.do
	∙ call
		`function(f) { return B.check('a', f()); }`

	‣ ? then:Fun else:Fun
		doc
			TODO

		`this.valueOf() ? then() : _else()`

	‣ ∨:B a:Fun
		doc
			Whether either this or `a` is ⊤.
		eg
			✔= ⊥
				⊥.∨
					⊥
			✔= ⊤
				⊤.∨
					⊥

		`this || call(a)`

	‣ ∧:B a:Fun
		doc
			Whether both I and the result of `a` are ⊤.
		eg
			✔= ⊤
				⊤.∧
					⊤
			✔= ⊥
				⊤.∧
					⊥

		`this && call(a)`

	‣ ¬:B
		doc
			TODO
		eg
			✔= ⊥
				⊤.¬
			✔= ⊤
				⊥.¬

		`!this`

	‣ →:B a:Fun
		doc
			Whether this is ⊥ or the result of `a` is ⊤.
		eg
			✔= ⊤
				⊤.→
					⊤
			✔= ⊤
				⊥.→
					⊥
			✔= ⊥
				⊤.→
					⊥

		`!this || call(a)`

	‣ ↔ a:B
		doc
			Same as =, but for Bools only.

		= a

	‣ ⊕ a:B
		doc
			Same as ≠, but for Bools only.

		≠ a

	‣ nor a:B
		doc
			Whether I and `a` are both ⊥.
		eg
			✔= ⊤
				⊥.nor ⊥

		`!(this || a)`

	‣ if! then:Fun
		doc
			Runs `then` if I am ⊤.

		`
			if (this)
				then()
			return;

	‣ if:Opt then:Fun
		doc
			If I am ⊤, returns Some of the result of `then`.
			Else, returns None.
		eg
			✔= (Opt.some 1)
				⊤.if
					1
			✔= Opt.None
				⊥.if
					1

		`this ? Opt().some(then()) : Opt().None()`

	‣ unless! then:Fun
		doc
			Opposite of `if!`.

		¬.if! then

	‣ unless:Opt then:Fun
		doc
			Opposite of `if`.

		¬.if then

	\alias '∨ 'or
	\alias '∧ 'and
	\alias '¬ 'not
	\alias '→ 'implies
	\alias '⊕ 'xor



export B
