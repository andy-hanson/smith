use Ref

static!

$$ times times:Nat do:Fun
	doc
		Runs `do` `n` times.
	eg
		val r
			Ref 0
		times 3
			r.! _increment
		!= 3
			r.get

	`
		for (var timesLeft = times; timesLeft > 0; timesLeft -= 1)
			_do();

\ must get this here as use in JS will not trigger the use
val Some
	Opt.Some

$$new of do:Fun
	doc
		Keep running fun until it returns Some.
		Then return the value in that Some.
	eg
		val a
			Ref 3
		val b
			Ref 0
		!= 3
			Loop
				a.! _decrement
				b.! _increment
				a.get.positive?.unless
					b.get
	err
		Infinite loop if Some never returned.

	`
		while (true) {
			var result = _do();
			if (Some['subsumes?'](result))
				return result.value();
		}

$$ while condition:Fun do:Fun
	doc
		Run `do` as long as `condition` holds.
	eg
		val a
			Ref 3
		val b
			Ref 0
		while
			a.get.positive?
		|
			a.! _decrement
			b.! _increment
		!= 0
			a.get
		!= 3
			b.get

	`
		while (condition())
			_do();

$$ do-while do:Fun condition:Fun
	doc
		Run `body`, then keep running it as long as `condition` holds.
	eg
		val a
			Ref 0
		do-while
			a.! _increment
		|
			Bool.False
		!.fails
			do-while
				1
			|
				2
		!= 1
			a.get

	`
		do {
			_do();
		}
		while (Bool().check('condition', condition()));

