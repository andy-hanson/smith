use! Global

val A
	Prelude@Any

A.do
	$ show-properties
		doc
			TODO

		`
			var s = '{ ', me = this, keys = global.Object.getOwnPropertyNames(me);
			keys.forEach(function(key) {
				s += key + ', '; //+ ': ' + A.inspect(me[key]) + ',';
			});
			return s + ' }';

	$ has-property? name:Str
		doc
			Whether `name` is directly a property of this object.
			(In the case of most Smith objects, `name` should begin with an `_`.)
		eg
			! (`{ a: 3 }`.has-property? 'a)
			! (`{ }`.has-property? 'a).not

		Global@Object@prototype@hasOwnProperty.call me name

	$ has-proto-property? name:Str
		doc
			Whether this or any prototype has the property `name`.
		eg
			! ((Global@Object.create `{ a: 3 }`).has-proto-property? 'a)

		`this[name] != null`

	$ proto-property name:Str
		doc
			TODO

		`this[name]`

	$ unsafe-property name:Str
		doc
			May return undefined.

		`this[name]`

	$ property name:Str
		doc
			TODO
		how
			must be in JS because fundamental methods depend on this.

		`
			if (global.Object.prototype.hasOwnProperty.call(this, name))
				return this[name];
			else
				throw new global.Error(
					"Object does not have property " + name +
					", has [" + global.Object.getOwnPropertyNames(this) + "]");

	$ property~ name:Str
		doc
			TODO

		(has-property? name).if
			property name

	$ property-names:Array
		doc
			TODO
		err
			TypeError if I'm a value type.

		Global@Object.getOwnPropertyNames me

	$ each-property fun:Fun
		doc
			TODO
		oth
			TODO:
			property-iterator

		\ must use forEach because defining Array requires this
		property-names.forEach |name ...ignore
			fun name (property name)

	$ new-mutable! name:Str value
		doc
			TODO
		in
			! (has-property? name).not

		set-property! name value

	$ set-property!:Void name:Str value
		doc
			TODO

		`
			this[name] = value;
			return;

	$ delete-property! name:Str
		in
			has-property? name

		delete-property-if-exists! name

	$ delete-property-if-exists! name:Str
		`delete this[name]`

	$ new-unless-exists! name:Str make-value:Fun
		doc
			TODO

		(has-property? name).unless!
			new! name make-value.of

	$ modify-property! name:Str mod:Fun
		doc
			TODO

		val old
			property name
		val new
			mod old
		set-property! name new

	\$ is-a?:Bool class:Any-Class
	\	doc
	\		TODO

	\	class.subsumes? me

	$ identical?:Bool a
		doc
			Whether I and a are the very same object, at the same place in memory.
			For testing whether we are the same in every respect, use `structual-=`.
		eg
			val a
				Opt.some 1
			! (a.identical? a)
			! (a.identical? (Opt.some 3)).not
			! ("123".identical? "123")

		`this === a`

	$ structural-=:Bool a
		doc
			Whether I and `a` have equal (by calling `=`) properties and are of the same class.
		eg
			val a
				Opt.some 1
			! (a.structural-= (Opt.some 1))
			! (a.structural-= (Opt.some 2)).not
			! (a.structural-= `{ _value: 1 }`).not

		(class.= a.class).and
			val keys
				property-names

			keys.all? |key
				(a.has-property? key).and
					(property key).= (a.property key)

		\`
		\	if (this.class() !== a.class())
		\		return false;
		\	var meKeys = global.Object.getOwnPropertyNames(this);
		\	var aKeys = global.Object.getOwnPropertyNames(a);
		\	if (meKeys.length != aKeys.length)
		\		return false;
		\	return meKeys.every(function(key) {
		\		return this[key]['='](a[key]);
		\	})

	$ =:Bool a
		doc
			TODO

		(identical? a).or
			structural-= a

	$ /= a
		doc
			Not `=`.

		(= a).not

	$ send name:Str ...args
		doc
			Calls the method of the name on the arguments.
		eg
			!= 3
				1.send '+ 2

		(proto-property name).apply me args

	val oi
		proto@inspect

export A
