Fun.do
	$ new-bound-of new-bound-to ...arguments
		unbound.apply new-bound-to arguments

	\$new inspect
	\	"Fun(...)"

	$ of ...args
		apply () args

	$ compose b:Fun
		doc
			Function composition; must have only 1 argument
		eg
			val increment-then-twice
				_twice.compose _increment
			!= 6
				increment-then-twice 2

		| x
			me (b x)

	alias 'of 'run!

	$ cache
		doc
			This function must have 0 arguments.
			Returns a Fun which lazily produces my result.
		eg
			val r
				Ref 0
			val make-three |
				r.! _increment
				3
			val cached
				make-three.cache
			!= 3
				cached.run!
			!= 3
				cached.run!
			!= 1
				r.get

		`
			var me = this;
			var get = function() {
				var got = me();
				get = function() { return got; }
				return got;
			}
			return function() { return get(); };
