Fun.do

	‣ new-bound-of new-bound-to ...arguments
		unbound.apply new-bound-to arguments

	‣ of ...args
		apply () args

	‣ compose b:Fun
		doc
			Function composition; must have only 1 argument
		eg
			∙ increment-then-twice
				_twice.compose _increment
			✔= 6
				increment-then-twice 2

		| x
			me (b x)

	alias 'of 'run!

	\‣ be-override!
	\	new! '_is-override Bool.⊤

	\‣ is-override?
	\	has-property? '_is-override

	‣ cache
		doc
			This function must have 0 arguments.
			Returns a Fun which lazily produces my result.
		eg
			∙ r
				Ref 0
			∙ make-3 |
				r.! _increment
				3
			∙ cached
				make-3.cache
			✔= 3
				cached.run!
			✔= 3
				cached.run!
			✔= 1
				r.get

		`
			var me = this;
			var get = function() {
				var got = me();
				get = function() { return got; }
				return got;
			}
			return function() { return get(); };
