doc
	TODO

use! Global

‣‣new of ...args
	◆.returning (new (Global@Object.create `null`)) |map
		(args.group 2).each
			map.+! (it 0) (it 1)

‣‣ sample
	of 'a 1 'b 2 'c 3

‣ -call name ...args
	(Any.method name).apply data args

data |data
	()

‣ empty?
	eg
		✔ String-Map!.of.empty?

	keys.empty?

‣ key? name:Str
	eg
		✔ (sample.key? 'a)

	-call 'has-property? name

‣ of~ name:Str
	eg
		✔= (Opt.some 1)
			sample.of~ 'a
	how
		Can't simply -call 'property~ because that calls methods on 'this'.

	(key? name).if
		of name

‣ of name:Str
	eg
		✔= 1
			(sample) 'a
		✔.fails
			(sample) 'eeh

	-call 'property name

‣ +! name:Str value
	in
		✔ (-call 'has-property? name).¬
	eg
		✔.fails
			sample.+! 'a 2

	-call 'set-property! name value

‣ -! name:Str
	eg
		∙ s
			sample
		s.-! 'a
		s.-! 'z \ does nothing
		✔ (s.key? 'a).¬

	-call 'delete-property-if-exists! name

‣ keys
	eg
		✔= (Bag 'a 'b 'c)
			sample.keys

	-call 'property-names

‣new toString
	-call 'show-properties
