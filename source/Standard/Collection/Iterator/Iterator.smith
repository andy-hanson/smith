doc
	Must have 'next', which steps the iterator to the next step.
	Iterators should define a 'sample' containing 1, 2, and 3 (in that order) for tests to run on.
	Every operation on an Iterator changes it;
	So:
		iter.of 3
		iter.of 1
	Returns element 3, then element 4.
	And operations such as each leave the iterator empty.
todo
	fold-while
	take (Take-Iterator)
	slice (drop then take)
	unique f:Fun (keeps only values with unique evals of f)

use ++-Iterator
use Collect-Iterator
use Group-Iterator
use Keep-Iterator
use Slice-Iterator
use Zip-Iterator

abstract!

‣‣override of ...members
	members.iterator

‣sub-object Empty
	‣ next
		stop

‣‣ flatten ...iterators
	doc
		TODO

	iterators.is-empty?.?
		Empty-Iterator
	++-iterator iterators.first iterators.tail

‣‣ sample
	todo
		delete me, use abstract

	(Bag 1 2 3).iterator

‣‣ slice array-like start end
	Slice-Iterator array-like start end



‣ ++ ...iterators
	doc
		TODO
	eg
		✔= (Array 0 1 2 3)
			((Iterator 0).++ (Iterator 1 2) Iterator.Empty (Iterator 3)).to-bag

	++-Iterator me iterators.iterator

‣ ∃:Bool condition:Fun
	doc
		TODO
	eg
		✔ (sample.∃ _even?)
		✔ (sample.∃ _negative?).¬

	∙ none
		∀
			(condition it).¬
	none.¬

‣ ∀:Bool condition:Fun
	doc
		TODO
	eg
		✔ (sample.∀ _natural?)
		✔ (sample.∀ _odd?).¬

	`
		var all = true;
		var over = false;
		while (!over)
			over = this['if-next'](function(next) {
				all = condition(next);
				Bool().check('condition-result', all);
				return !all;
			}, function() {
				return true;
			});
		return all;

‣ ∋ value
	doc
		Whether I contain the value.
	eg
		✔ (sample.∋ 3)

	∃ value.=_

‣ collect collector:Fun
	Collect-Iterator me collector

‣ count:Num condition:Fun
	doc
		How many elements satisfy the condition.
	eg
		✔= 2
			sample.count _odd?

	fold[0] |count em
		(condition em).?
			count.increment
		|
			count

‣ delete condition:Fun
	doc
		Opposite of `keep`.

	Keep-Iterator me
		(condition it).¬

‣ drop n:Num
	doc
		TODO
	eg
		✔= 3
			(sample.drop 2).fold _+

	↺.times n
		next
	me

‣ each do:Fun
	doc
		TODO
	eg
		∙ r
			Ref 0
		sample.each
			r.! it.+_
		✔= 6
			r.get

	∀
		do it
		Bool.⊤
	()

‣ empty?
	doc
		Whether I contain no elements.
		AKA, whether `next` will fail.
	eg
		✔ sample.empty?.¬

	✘.throws? next_

\‣ fold-while combine:Fun
\	eg
\		✔= 10
\			sample.fold-while |so-far next
\				Opt.filter (next.< 3)
\					so-far.+ next
\
\	TODO

‣ fold[initial] combine:Fun
	doc
		TODO
	eg
		✔= 10
			sample.fold[4] _+
		✔= 6
			sample.fold _+
	todo
		fold-while |acc next
			Opt.some (combine acc next)

	∙ init
		initial.or
			next

	`
		var res = init;
		var over = false;
		while (!over)
			over = this['if-next'](function(next) {
				res = combine(res, next);
				return false;
			}, function() {
				return true;
			});
		return res;

‣ first
	eg
		✔= 1
			sample.first

	of 0

‣ group group-size:Num
	Group-Iterator me group-size

‣ if-next a:Fun b:Fun
	doc
		If there is a next element, calls a on it.
		Else calls b.

	`
		var x;
		try {
			x = this.next();
			return a(x);
		}
		catch (error) {
			if (error.message == 'StopIteration')
				return b();
			else
				throw error;
		}

‣ keep condition:Fun
	doc
		TODO

	Keep-Iterator me condition

‣ next~
	if-next Opt.some_ Opt.None_


‣ last
	eg
		✔= 3
			sample.last

	`
		var last;
		try {
			while (true)
				last = this.next();
		}
		catch (error) {
			if (error.message == 'StopIteration')
				return last;
			else
				throw error;
		}

‣ make-string:Str[joiner~:Str]
	doc
		TODO
	eg
		✔= "1 2 3"
			sample.make-string
		✔= "1+2+3"
			sample.make-string['+]

	∙ joiner
		joiner~.or
			" "

	(to-bag.collect Str.of_).join joiner

‣ of index:Num
	doc
		TODO
	err
		StopIteration if index.< size
	how
		Steps through every previous value. Slow!

	`
		for (var i = 0; i < index; i++)
			this.next();
		return this.next();

‣ size
	count
		Bool.⊤

‣ stop
	doc
		TODO
	err
		StopIteration
	todo
		Use native StopIteration

	✘ 'StopIteration

∙ Bag-Class
	Bag.class

‣ to-bag[class~:Bag-Class]
	∙ class
		class~.or
			Array
	class.from-iterator me

‣ zip ...iterators
	doc
		TODO
	eg
		✔= (Array (Array 0 2 4) (Array 1 3 5))
			((Iterator 0 1).zip (Iterator 2 3) (Iterator 4 5)).to-bag

	Zip-Iterator (iterators.« me)
