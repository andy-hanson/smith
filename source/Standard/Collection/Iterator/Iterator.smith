doc
	Must have 'next', which steps the iterator to the next step.
	Iterators should define a 'sample' containing 1, 2, and 3 (in that order) for tests to run on.
	Every operation on an Iterator changes it;
	So:
		iter.of 3
		iter.of 1
	Returns element 3, then element 4.
	And operations such as each leave the iterator empty.

oth
	Remaining:
	fold-while
	take (Take-Iterator)
	slice (drop then take)
	unique f:Fun (keeps only values with unique evals of f)

use ++-Iterator
use Collect-Iterator
use Group-Iterator
use Keep-Iterator
use Slice-Iterator
use Zip-Iterator

abstract!

$ same-members a:Iterator
	doc
		TODO


	(use Console).log! 'Hi
	`true`

$$new of ...members
	members.iterator

$sub-singleton Empty
	$ next
		stop

$$ flatten ...iterators
	doc
		TODO

	iterators.is-empty?.?
		Empty-Iterator
	++-iterator iterators.first iterators.tail

$$ sample
	doc
		TODO: delete here, use abstractly

	(Bag 1 2 3).iterator

$$ slice array-like start end
	Slice-Iterator array-like start end

$ ++ ...iterators
	doc
		TODO
	eg
		!= (Array 0 1 2 3)
			((Iterator 0).++ (Iterator 1 2) Iterator.Empty (Iterator 3)).to-bag

	++-Iterator me iterators.iterator

$ any?:Bool condition:Fun
	doc
		TODO
	eg
		! (sample.any? _even?)
		! (sample.any? _negative?).not

	val none
		all?
			(condition it).not
	none.not

$ all?:Bool condition:Fun
	doc
		TODO
	eg
		! (sample.all? _Nat?)
		! (sample.all? _odd?).not

	`
		var all = true;
		var over = false;
		while (!over)
			over = this['if-next'](function(next) {
				all = condition(next);
				Bool().check('condition-result', all);
				return !all;
			}, function() {
				return true;
			});
		return all;

$ has value
	doc
		Whether I contain the value.
	eg
		! (sample.has 3)

	any? value.=_

$ collect collector:Fun
	Collect-Iterator me collector

$ count:Nat condition:Fun
	doc
		How many elements satisfy the condition.
	eg
		!= 2
			sample.count _odd?

	fold 0 |count em
		(condition em).?
			count.increment
		|
			count

$ delete condition:Fun
	doc
		Opposite of `keep`.

	Keep-Iterator me
		(condition it).not

$ drop n:Nat
	doc
		TODO
	eg
		!= 3
			(sample.drop 2).fold _+

	Loop.times n
		next
	me

$ each do:Fun
	doc
		TODO
	eg
		val r
			Ref 0
		sample.each
			r.! it.+_
		!= 6
			r.get

	all?
		do it
		Bool.True
	()

$ empty?
	doc
		Whether I contain no elements.
		AKA, whether `next` will fail.
	eg
		! sample.empty?.not

	Error.throws? next_

$ fold-while initial~ combine:Fun
	eg
		!= 3
			sample.fold-while |so-far next
				Opt.filter (so-far.+ next)
					it.< 6

	val init
		initial~.or
			next

	`
		var res = init;
		var over = false;
		while (!over)
			over = this['if-next'](function(next) {
				var x = Opt().check('combine-result', combine(res, next), x);
				var notOver = Opt().Some()['subsumes?'](x);
				if (notOver)
					res = x.value();
				return !notOver;
			}, function() {
				return true;
			});
		return res;

$ fold initial~ combine:Fun
	doc
		TODO
	eg
		!= 10
			sample.fold 4 _+
		!= 6
			sample.fold _+

	val init
		initial~.or
			next

	`
		var res = init;
		var over = false;
		while (!over)
			over = this['if-next'](function(next) {
				res = combine(res, next);
				return false;
			}, function() {
				return true;
			});
		return res;

$ first
	eg
		!= 1
			sample.first

	of 0

$ group group-size:Nat
	Group-Iterator me group-size

$ if-next a:Fun b:Fun
	doc
		If there is a next element, calls a on it.
		Else calls b.

	`
		var x;
		try {
			x = this.next();
			return a(x);
		}
		catch (error) {
			if (error.message == 'StopIteration')
				return b();
			else
				throw error;
		}

$ inspect
	"({class.name} {make-string})"

$ keep condition:Fun
	doc
		TODO

	Keep-Iterator me condition

$ next~
	if-next Opt.some_ Opt.None_


$ last
	eg
		!= 3
			sample.last

	`
		var last;
		try {
			while (true)
				last = this.next();
		}
		catch (error) {
			if (error.message == 'StopIteration')
				return last;
			else
				throw error;
		}

$ make-string:Str joiner~
	doc
		TODO
	eg
		!= "1 2 3"
			sample.make-string
		!= "1+2+3"
			sample.make-string '+

	val joiner
		joiner~.or
			" "

	(to-bag.collect Str.of_).join joiner

$ of index:Nat
	doc
		TODO
	err
		StopIteration if index.< size
	how
		Steps through every previous value. Slow!

	`
		for (var i = 0; i < index; i++)
			this.next();
		return this.next();

$ size
	count
		Bool.True

$ stop
	doc
		TODO
	err
		StopIteration
	oth
		TODO: Use native StopIteration

	Error.throw! 'StopIteration

val Bag-Class
	Bag.class

$ to-bag class~:Bag-Class
	val class:Bag-Class
		class~.or
			Array
	class.from-iterator me

$ zip ...iterators
	doc
		TODO
	eg
		!= (Array (Array 0 2 4) (Array 1 3 5))
			((Iterator 0 1).zip (Iterator 2 3) (Iterator 4 5)).to-bag

	Zip-Iterator (iterators.< me)
