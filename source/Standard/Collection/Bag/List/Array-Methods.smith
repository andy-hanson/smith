Array.do
	doc
		TODO

	‣‣ of-capacity n:ℕ
		Global@Array n

	‣‣ fill n:ℕ filler:Fun
		(of-capacity n).collect-with-index |value index
			filler index

	‣‣ from-iterator:Array iterator:Iterator
		∙ x
			Array.of
		iterator.each x.push_
		x

	‣ collect-with-index do:Fun
		todo
			Seq

		`
			var out = [];
			for (var index = 0; index < this.length; index++)
				out[index] = _do(this[index], index);
			return out;

	‣ copy:Array
		slice

	‣ »!:Void value
		push value
		()

	‣ »:Array value
		◆.returning copy
			it.»! value

	‣ »»!:Void value:Iterable
		Array.proto@push.apply me value.to-bag

	\ This goes down here because `trait` needs '+'
	trait List

	‣ «!:Void value
		unshift value
		()

	‣ «:Array value
		◆.returning copy
			it.«! value

	\‣ ∋ em
	\	todo
	\		Call '=' at each element
	\
	\	(indexOf em).≠ -1

	‣new size
		@length

	‣‣new of ...members
		members

	‣ iterator
		Iterator.slice me 0 size

	\‣new each do:Fun
	\	∙ size
	\		size
	\	`
	\		for (var index = 0; index < size; index++)
	\			_do(this[index]);

	‣new of:Any index:ℕ
		in
			✔ (valid-index? index)
				"Invalid index {index} of array of size {size}"

		`this[index]`

	‣ !:Void index:ℕ value
		`
			this[index] = value;
			return;

	‣ valid-index?:Bool index:ℝ
		index.ℕ?.∧
			index.< size


	‣ collect!:Void collector:Fun
		∙ size
			size
		`
			for (var index = 0; index < size; index++)
				this[index] = collector(this[index]);
			var res = null;

	‣new collect:Array collector:Fun
		◆.returning copy
			it.collect! collector

	‣new ++ iter:Iterable
		concat iter.to-bag
