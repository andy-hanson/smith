doc
	TODO
eg
	Deque.of.do
		\print!
		<! 2
		\print!
		>! 3
		\print!
		<! 1
		\print!
		!= 3
			un->!
		!= 2
			un->!
		!= 1
			un->!
		! empty?

super List

$$new of ...members
	oth
		TODO:
		inherit from Bag (builder)

	members.size.zero?.?
		new (Array.of-capacity 8) 0 0
	|
		new members 0 members.size.decrement

\ end is non-inclusive, front is
data |!data:Array !front:Nat !end:Nat
	()

$ print!
	Console.log! "{data} {front} {end}"

$new size
	end.- front

$new empty?
	front.= end

$ -loop:Nat index:Int
	(data.size.+ index).remainder data.size

$ >! value
	-maybe-expand!
	data.! end value
	end!
		-loop it.increment

$ <! value
	-maybe-expand!
	front!
		-loop it.decrement
	data.! front value

$new first:Any
	(data) front

$new last:Any
	(data) end.decrement

$ un-<!
	Control.returning first
		front!
			-loop it.increment

$ un->!
	end!
		-loop it.decrement
	(data) end

$ -maybe-expand!
	doc
		Puts the data in the middle of a new array twice as big.

	(front.= end.increment).if!
		val new-data
			Array.of-capacity data.size.twice
		val offset
			data.size.half
		front!
			offset
		end!
			(offset.+ data.size)
		new-data.splice front end ...data


iterator
	$$new of deque
		new deque deque.front

	data |deque:Deque !index:Nat
		()

	$ next
		(index.= deque.end).?
			stop
		|
			Control.returning (deque.data index)
				index!
					deque.-loop it.increment







