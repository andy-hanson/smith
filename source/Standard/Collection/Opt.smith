Prelude@Opt.do
	‣‣ Some
		Prelude@Some

	‣‣ None
		Prelude@None

	Some.do \‣sub-class Some
		\ TODO
		\data |value
		\	()

		‣read value

		‣ force[message~:Str]
			value

		‣ or else:Fun
			value

		‣ each do:Fun
			do.run! value

		‣ collect of:Fun
			Some (of value)

		‣ ~ if-some:Fun if-none:Fun
			if-some value

		‣ to-nullable
			value

		‣override toString
			"(Some {value})"


	None.class.do \‣sub-object None
		‣ force[message~:Str]
			∙ message
				message~.or
					「Tried to force None.」
			✘ message

		‣ or else:Fun
			else.of

		‣ each do:Fun
			()

		‣ collect of:Fun
			None

		‣ ~ if-some:Fun if-none:Fun
			if-none.of

		‣ to-nullable
			()

		‣override toString
			"None"

	‣‣ some value:Any
		Some.of value

	‣‣ filter value:Any condition:Fun
		(condition value).if
			value


	‣‣ from-nullable a
		`a != null`.if
			a

export Prelude@Opt
