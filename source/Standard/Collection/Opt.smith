Prelude@Opt.do

	‣‣ Some
		Prelude@Some

	‣‣ None
		Prelude@None

	Some.do #‣sub-class Some
		# TODO
		#data |value
		#	()

		‣read value

		‣ force
			value

		‣ or else:Fun
			value

		‣ each fun:Fun
			fun value
			()

		‣ ~ if-some:Fun if-none:Fun
			if-some value

		‣ to-nullable
			value

		‣override toString
			"(Some {value})"


	None.class.do #‣sub-object None
		‣ force
			✘ 「Tried to force None.」

		‣ or else:Fun
			else.of

		‣ each fun:Fun
			()

		‣ ~ if-some:Fun if-none:Fun
			if-none ()

		‣ to-nullable
			()

		‣override toString
			"None"

	‣‣ some value:Any
		(Some) value

	‣‣ filter value:Any condition:Fun
		(condition value).if
			value


	‣‣ from-nullable a
		`a != null`.if
			a

export Prelude@Opt
