Prelude@Opt.do
	$val Some
		Prelude@Some

	$val None
		Prelude@None

	Some.do
		\ constructor in Prelude

		$read value

		$ force message~:Str
			value

		$ or else:Fun
			value

		$ each do:Fun
			do.run! value

		$ collect of:Fun
			Some (of value)

		$ ~ if-some:Fun if-none:Fun
			if-some value

		$ to-nullable
			value

		$new toString
			"(Some {value})"


	None.class.do
		$ force message~:Str
			val message
				message~.or
					"Tried to force None."
			Error.throw! message

		$ or else:Fun
			else.of

		$ each do:Fun
			()

		$ collect of:Fun
			None

		$ ~ if-some:Fun if-none:Fun
			if-none.of

		$ to-nullable
			()

		$new toString
			"None"

	$$ some value:Any
		Some.of value

	$$ filter value:Any condition:Fun
		(condition value).if
			value

	$$ from-nullable a
		`a != null`.if
			a

export Prelude@Opt
