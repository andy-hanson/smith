data |x:Real y:Real
	()

$new toString
	"<#{x} #{y}>"

$ +:Vec2 v:Vec2
	doc
		Translates by `v`.
	eg
		!= (Vec2 4 6)
			(Vec2 1 2).+ (Vec2 3 4)

	Vec2 (x.+ v.x) (y.+ v.y)

$ -:Vec2 v:Vec2
	doc
		Translates by the opposite of `v`.
	eg
		!= (Vec2 1 3)
			(Vec2 3 4).- (Vec2 2 1)

	+ v.negate

$ negate-x:Vec2
	doc
		Flips me around x-axis.
	eg
		!= implies
			←.negate-x

	Vec2 x.negate y

$ negate-y:Vec2
	doc
		Flips me around y-axis.
	eg
		!= ↑
			↓.negate-y

	Vec2 x y.negate

$ negate:Vec2
	doc
		Opposite vector. Our sum is 0.
	eg
		!= ↖
			↘.negate

	negate-x.negate-y

$ length^2:Real
	x.square.+ y.square

$ length:Real
	length^2.square-root

$val zero
	Vec2 0 0

$ zero?
	x.zero?.and
		y.zero?

$ Loop:Vec2 amount:Real
	TODO

$ ↻:Vec2 amount:Real
	TODO

$ ← amount:Real
	Vec2 (x.- amount) y

$ implies amount:Real
	Vec2 (x.+ amount) y

$ ↓ amount:Real
	Vec2 x (y.- amount)

$ ↑ amount:Real
	Vec2 x (y.+ amount)

$ ←?
	doc
		Whether I lean left.
	eg
		! ↖.←?
		! ↗.←?.not

	x.negative?

$ implies?
	doc
		Whether I lean right.
	eg
		! ↖.implies?.not
		! ↗.implies?

	x.positive?

$ ↓?
	doc
		Whether I lean down.
	eg
		! ↖.↓?.not
		! ↙.↓?

	y.negative?

$ ↑?
	doc
		Whether I lean up.
	eg
		! ↖.↑?
		! ↙.↑?.not

	y.positive?


$val ←
	Vec2 -1 0

$val implies
	Vec2 1 0

$val ↓
	Vec2 0 -1

$val ↑
	Vec2 0 1

$val ↗
	Vec2 2.square-root 2.square-root

$val ↖
	↗.negate-x

$val ↘
	↗.negate-y

$val ↙
	↗.negate


