val Math
	(use Global)@Math

(use Real).do
	$new = a
		`Object(a) instanceof Number && (this + 0) === (a + 0)`

	$ ~= a:Real significant-digits~:Nat
		doc
			Whether two I am equal to a to within `significant-digits` digits.
			Delegates to ~=0 when I or a are 0.
		eg
			! (1001.~= 1000 3)
			! (1001.~= 1000 4).not
			! (0.001001.~= 0.001 3)
			! (0.001001.~= 0.001 4).not

		val significant-digits
			significant-digits~.or
				6

		zero?.?
			a.~=0 significant-digits
		|
			a.zero?.?
				~=0 significant-digits
			|
				val avg-mag
					magnitude.average a.magnitude
				val n-digits
					avg-mag.log-10.round-down
				val scale
					10.^ n-digits
				val scaled-me
					/ scale
				val scaled-a
					a./ scale
				val scaled-diff
					scaled-a.distance scaled-me
				val epsilon
					10.^ significant-digits.negate

				scaled-diff.< epsilon

	$ ~=0 significant-digits~:Nat
		doc
			Whether a number is close to zero;
			it must be 0.00... for sig-figs digits.
		eg
			! (0.00999.~=0 2)
			! (0.01.~=0 2).not

		val significant-digits
			significant-digits~.or
				6

		val max
			10.^ significant-digits.negate

		magnitude.< max

	$ in-range min max
		oth
			TODO: Move to Comparable

		(>= min).and
			(< max)

	$ < a:Real
		doc
			Whether I am closer to -Infinity than a.
		eg
			! (-1.< 2)
			! (1.< 1).not

		`this < a`

	$ > a:Real
		doc
			Whether I am closer to Infinity than a.
		eg
			! (1.> -2)
			! (1.> 1).not

		`this > a`

	$ <= a:Real
		doc
			Whether I am < or = a.
		eg
			! (1.<= 1)

		`this <= a`

	$ >= a:Real
		doc
			Whether I am > or = a.
		eg
			! (1.>= 1)

		`this >= a`

	$ min a:Real
		doc
			Lower of me and `a`.
		eg
			!= 1
				1.min 2
		how
			TODO: in Comparable

		Math.min me a

	$ max a:Real
		doc
			Higher of me and `a`.
		eg
			!= 2
				1.max 2

		Math.max me a

	$ crop min:Real max:Real
		doc
			Forces me in between min and max.
		in
			! (min.< max)
		eg
			!= 1
				0.crop 1 2
			!= 2
				3.crop 1 2
			!= 1.5
				1.5.crop 1 2

		(me.min max).max min