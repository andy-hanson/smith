use! Global

(use Real).do
	$ not-a-number?
		Global@Number.isNaN me

	$ forbid-NaN
		eg
			!.fails
				Real.Not-A-Number.forbid-NaN

		not-a-number?.?
			Error.throw! "Not a Number"
		|
			me

	$ sign
		doc
			1, -1, 0, -0, or `Real.Not-A-Number`.
		eg
			(Bag 1 -1 0 -0).each |n
				!= n
					n.sign
			! Not-A-Number.sign.not-a-number?

		how
			TODO: use Math.sign

		positive?.?
			1
		|
			negative?.?
				-1
			|
				positive-zero?.?
					0
				|
					negative-zero?.?
						-0
					|
						! not-a-number?
						Real.Not-A-Number

	$ positive-zero?
		doc
			Whether I am +0 and not -0.
			If you need this info, I don't envy you.
		eg
			! 0.positive-zero?
			! -0.positive-zero?.not

		zero?.and
			inverse.= Real.Infinity

	$ negative-zero?
		doc
			Whether I am -0 and not +0.
			If you need this info, I don't envy you.
		eg
			! -0.negative-zero?
			! 0.negative-zero?.not

		zero?.and
			inverse.= Real.-Infinity

	$ positive?
		doc
			Whether this number is > 0.
			All numbers are are one of `positive?`, `negative?`, `zero?`
		eg
			! 1.positive?
			! 0.positive?.not
			! -1.positive?.not

		> 0

	$ negative?
		doc
			Whether this number is < 0.
			All numbers are are one of `positive?`, `negative?`, `zero?`
		eg
			! 1.negative?.not
			! 0.negative?.not
			! -1.negative?
		< 0

	$ zero?
		doc
			Whether this number is 0.
			(Then it is `positive-zero?` or `negative-zero?`.)
		eg
			! 0.zero?
			! -0.zero?
			! 42.zero?.not

		= 0

	$ finite?
		doc
			Am I any number other than `Real.Infinity` or `Real.-Infinity`?
		eg
			! 42.finite?

		Global@Number.isFinite me

	$ infinite?
		doc
			`Real.Infinity` or `Real.-Infinity`.
		eg
			! Infinity.infinite?
			! -Infinity.infinite?

		finite?.not

