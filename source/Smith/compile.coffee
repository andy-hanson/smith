lex = require './lex'
parse = require './parse'
AllModules = require './AllModules'

shortName = (fullName) ->
	(fullName.split '/').pop()

module.exports = (string, inName, outName, allModules) ->
	###
	Produces the output { code, map }.
	###
	type string, String
	type inName, String
	check (inName.endsWith '.smith'), ->
		"Input must be a .smith, not #{inName}"
	type outName, String
	type allModules, AllModules

	shortIn = shortName inName
	shortOut = shortName outName
	typeName = shortIn.withoutEnd '.smith'

	tokens =
		lex string
	expression =
		parse tokens, typeName, inName, allModules

	node =
		expression.toNode inName, '\t'

	prelude =
		allModules. get 'Prelude', inName

	open = """
		// Generated by smith from #{inName}
		//# sourceMappingURL=#{shortOut}.map
		"use strict"
		if (typeof define !== 'function')
			var define = require('amdefine')(module)

		define(function(_require) {
			var _prelude = _require('#{prelude}');
			var _f = _prelude.fun;
			var _b = _prelude.bind;
			var _s = _prelude.string;
			var _l = _prelude.lazy#{';'}

			return _prelude.type('#{typeName}', function() {

		"""

	close = """

			})
		})
	"""

	node.prepend '\t'
	node.prepend open
	node.add close

	node.toStringWithSourceMap { file: shortIn }
