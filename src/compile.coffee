lex = require './lex'
parse = require './parse'

shortName = (fullName) ->
	(fullName.split '/').pop()

module.exports = (string, inName, outName) ->
	###
	Produces the output { code, map }.
	###
	type string, String
	type inName, String
	type outName, String
	check (inName.endsWith '.smith'), ->
		"Input must be a .smith, not #{inName}"

	try
		shortIn = shortName inName
		shortOut = shortName outName
		typeName = shortIn.withoutEnd '.smith'

		tokens =
			lex string
		expression =
			parse tokens, typeName

		node =
			expression.toNode inName, '\t'

		open = """
			// Generated by smith from #{inName}
			//# sourceMappingURL=#{shortOut}.map

			"use strict";

			var _prelude = require('smith-prelude');
			var _f = _prelude.fun;
			var _b = _prelude.bind;
			var _s = _prelude.string;
			var _c = _prelude.checkExists;

			module.exports = _prelude.type('#{typeName}', function() {

			"""

		close = """

			});
		"""

		node.prepend open
		node.add close

		node.toStringWithSourceMap { file: shortIn }

	catch error
		error.message = "Error compiling #{inName}: #{error.message}"
		throw error
