path = require 'path'
lex = require '../lex'
parse = require '../parse'
Pos = require '../compile-help/Pos'
E = require '../Expression'
Options = require '../run/Options'
{ check, type } = require '../help/✔'
{ interleavePlus } = require '../help/list'
{ endsWith, withoutEnd } = require '../help/str'
AllModules = require './AllModules'

# @private
_shortName = (fullName) ->
	(fullName.split '/').pop()

###
Compiles a single file.
@param [String] code Contents of `inName`.
@param [String] inName Name of file, relative to options.in()
@param [Options] outName Name of output, relative to options.out()
@param [AllModules] allModules This project's AllModules.
@return [code, map]
###
module.exports = single = (code, inName, outName, options, allModules) ->
	type code, String, inName, String, outName, String,
		options, Options, allModules, AllModules
	check (endsWith inName, '.smith'), ->
		"Input must be a .smith file, not #{inName}"
	printModuleDefines = options.printModuleDefines()

	tokens =
		lex code, options

	type tokens, Array

	shortIn = _shortName inName
	shortOut = _shortName outName
	typeName = withoutEnd shortIn, '.smith'

	[ sooper, autoUses, fun ] =
		parse tokens, typeName, inName, options, allModules
	type sooper, E.Expression, autoUses, Array, fun, E.Expression

	prelude =
		allModules. get 'Smith-Prelude', Pos.start(), inName


	fullIn = options.in() + inName
	fullOut = options.out() + outName
	relativeToSource = path.relative fullOut, fullIn

	sourceMapRel =
		if options.copySources()
			"./#{shortIn}"
		else
			relativeToSource

	toNode = (x) ->
		x.toNode new E.Context options, sourceMapRel, ''

	superNode =
		toNode sooper

	autos =
		autoUses.filter (u) ->
			u.local.everUsed()
		.map(toNode)

	autos = interleavePlus autos, '\n'

	classConstruct =
		"_p.class('#{typeName}', #{superNode}, "

	printDef =
		if options.printModuleDefines()
			"\nconsole.log('→ #{typeName}...');"
		else
			''

	open = [
		"""
		// Generated by Smith from #{relativeToSource}
		//# sourceMappingURL=#{shortOut}.map
		"use strict";#{printDef}
		var _p = require('#{prelude}'), _b = _p.bind, _c = _p.call, _f = _p.fun,
			_it = _p.itMethod, _l = _p.lazy, _n = _p.checkNumberOfArguments,
			_s = _p.string, _a = _p.argument, _o = _p.optionalArgumentTag;\n

		""", autos, 'module.exports = ', classConstruct ]

	close = """

		)#{';'}
		#{if printModuleDefines then "console.log('← #{typeName}...');" else ''}
	"""

	node = toNode fun
	node.prepend open
	node.add close

	node.toStringWithSourceMap { file: shortIn }
