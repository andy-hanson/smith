path = require 'path'
lex = require '../lex'
parse = require '../parse'
Pos = require '../compile-help/Pos'
E = require '../Expression'
Options = require '../run/Options'
{ check, type } = require '../help/✔'
{ interleavePlus } = require '../help/list'
{ endsWith, withoutEnd } = require '../help/str'
AllModules = require './AllModules'

shortName = (fullName) ->
	(fullName.split '/').pop()

###
Produces the output { code, map }.
###
module.exports = (string, inName, outName, options) ->
	type string, String
	type inName, String
	check (endsWith inName, '.smith'), ->
		"Input must be a .smith, not #{inName}"
	type outName, String
	type options, Options
	allModules = options.allModules()
	type allModules, AllModules
	printModuleDefines = options.printModuleDefines()
	type printModuleDefines, Boolean

	shortIn = shortName inName
	shortOut = shortName outName
	typeName = withoutEnd shortIn, '.smith'

	tokens =
		lex string, options
	[ sooper, autoUses, fun ] =
		parse tokens, typeName, inName, options
	type sooper, E.Expression, autoUses, Array, fun, E.Expression

	prelude =
		allModules. get 'Smith-Prelude', Pos.start, inName

	# TODO: not hard-coded
	fullIn = 'source/' + inName
	fullOut = 'js/' + outName

	sourceMapRel = path.relative fullOut, fullIn

	toNode = (x) ->
		x.toNode new E.Context options, sourceMapRel, ''

	superNode =
		toNode sooper

	autos =
		autoUses.filter (u) ->
			u.local.everUsed()
		.map(toNode)

	autos = interleavePlus autos, '\n'

	classConstruct =
		"_p.class('#{typeName}', #{superNode}, "

	open = [
		"""
		// Generated by smith from #{inName}
		//# sourceMappingURL=#{shortOut}.map
		"use strict";
		#{if printModuleDefines then "console.log('→ #{typeName}...');" else ''}
		var _p = require('#{prelude}'), _b = _p.bind, _c = _p.call, _f = _p.fun,
			_it = _p.itMethod, _l = _p.lazy, _n = _p.checkNumberOfArguments,
			_s = _p.string, _a = _p.argument, _o = _p.optionalArgumentTag;\n

		""", autos, 'module.exports = ', classConstruct ]

	close = """

		)#{';'}
		#{if printModuleDefines then "console.log('← #{typeName}...');" else ''}
	"""

	node = toNode fun
	node.prepend open
	node.add close

	node.toStringWithSourceMap { file: shortIn }
