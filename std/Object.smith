use ./Type

∙ O
	`global.Object`.toType

O.‣ 'do |fun
	fun.unbound.call `this`

O.do
	‣ 'toString
		"<A {type.name}>"

	#alias 'toString 'inspect

	‣ 'property |name
		`this[name]`

	‣ 'set-property |name value
		`this[name] = value`

	‣ 'is-a |type:Type
		type.subsumes? me

	‣ 'identical? |other
		`this === other`

	‣ '= |other
		identical? other

	‣ '≠ |other
		(= other).¬

	‣ 'me
		`this`

	‣ 'send |name
		`this[name](Array.prototype.slice.call(arguments, 1))`

export O
